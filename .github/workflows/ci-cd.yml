name: SmartEats CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: smarteats_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from requirements.txt (root level - compatible with current structure)
        if [ -f "requirements.txt" ]; then
          echo "Installing from root requirements.txt"
          pip install -r requirements.txt
        fi
        # Install test dependencies
        pip install pytest pytest-cov
        # Install optional production dependencies with fallbacks (for CI environment)
        pip install redis || echo "Redis install failed, continuing..."
        pip install psycopg2-binary || echo "Psycopg2 install failed, continuing..."
        pip install prometheus-client || echo "Prometheus client install failed, continuing..."

    - name: 🔧 Create Test Configuration
      run: |
        # Create simple test configuration
        mkdir -p tests
        cat > tests/conftest.py << 'EOF'
        import pytest
        import sys
        import os
        sys.path.insert(0, os.path.abspath('.'))
        
        @pytest.fixture
        def app():
            from app import app
            app.config['TESTING'] = True
            app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
            return app
            
        @pytest.fixture
        def client(app):
            return app.test_client()
        EOF

    - name: 🧪 Create Basic Tests
      run: |
        cat > tests/test_basic.py << 'EOF'
        def test_app_exists(app):
            assert app is not None
            
        def test_app_is_testing(app):
            assert app.config['TESTING'] == True
            
        def test_health_endpoint(client):
            response = client.get('/api')
            assert response.status_code == 200
        EOF

    - name: 🧪 Run Tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/smarteats_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        JWT_SECRET_KEY: test_jwt_secret_for_ci
      run: |
        pytest tests/ -v

    - name: 📱 Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🧪 Test Frontend (Basic)
      run: |
        # Basic frontend validation
        if [ -f "enhanced-dashboard.html" ]; then
          echo "✅ Enhanced dashboard exists"
        fi
        if [ -f "enhanced-dashboard.js" ]; then
          echo "✅ Enhanced dashboard JS exists"
        fi
        if [ -f "enhanced-dashboard.css" ]; then
          echo "✅ Enhanced dashboard CSS exists"
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Validate Dockerfile
      run: |
        # Check if Dockerfile exists and is valid
        if [ -f "Dockerfile" ]; then
          echo "✅ Dockerfile found"
          echo "📝 Dockerfile contents:"
          head -20 Dockerfile
        else
          echo "❌ Dockerfile not found!"
          exit 1
        fi

    - name: 🔨 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/smarteats:latest
          ghcr.io/${{ github.repository_owner }}/smarteats:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      run: |
        echo "🌍 SmartEats deployment would happen here"
        echo "✅ Docker image: ghcr.io/${{ github.repository_owner }}/smarteats:${{ github.sha }}"
        echo "📊 Health check: Ready for production"
